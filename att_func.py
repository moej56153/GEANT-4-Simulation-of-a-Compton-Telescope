import numpy as np
import matplotlib.pyplot as plt
import reading_data as rd
import ang_tof as at
from scipy.integrate import quad


Na=np.array([1.00000E-03,  6.542E+02,  6.522E+02, 
   1.03542E-03,  5.960E+02,  5.941E+02, 
   1.07210E-03,  5.429E+02,  5.410E+02, 
   1.07210E-03,  6.435E+03,  6.320E+03, 
   1.50000E-03,  3.194E+03,  3.151E+03, 
   2.00000E-03,  1.521E+03,  1.504E+03, 
   3.00000E-03,  5.070E+02,  5.023E+02, 
   4.00000E-03,  2.261E+02,  2.238E+02, 
   5.00000E-03,  1.194E+02,  1.178E+02, 
   6.00000E-03,  7.030E+01,  6.915E+01, 
   8.00000E-03,  3.018E+01,  2.941E+01, 
   1.00000E-02,  1.557E+01,  1.499E+01, 
   1.50000E-02,  4.694E+00,  4.313E+00, 
   2.00000E-02,  2.057E+00,  1.759E+00, 
   3.00000E-02,  7.197E-01,  4.928E-01, 
   4.00000E-02,  3.969E-01,  2.031E-01, 
   5.00000E-02,  2.804E-01,  1.063E-01, 
   6.00000E-02,  2.268E-01,  6.625E-02, 
   8.00000E-02,  1.796E-01,  3.761E-02, 
   1.00000E-01,  1.585E-01,  2.931E-02, 
   1.50000E-01,  1.335E-01,  2.579E-02, 
   2.00000E-01,  1.199E-01,  2.635E-02, 
   3.00000E-01,  1.029E-01,  2.771E-02, 
   4.00000E-01,  9.185E-02,  2.833E-02, 
   5.00000E-01,  8.372E-02,  2.845E-02, 
   6.00000E-01,  7.736E-02,  2.830E-02, 
   8.00000E-01,  6.788E-02,  2.760E-02, 
   1.00000E+00,  6.100E-02,  2.669E-02, 
   1.25000E+00,  5.454E-02,  2.549E-02, 
   1.50000E+00,  4.968E-02,  2.437E-02, 
   2.00000E+00,  4.282E-02,  2.249E-02, 
   3.00000E+00,  3.487E-02,  1.997E-02, 
   4.00000E+00,  3.037E-02,  1.842E-02, 
   5.00000E+00,  2.753E-02,  1.743E-02, 
   6.00000E+00,  2.559E-02,  1.675E-02, 
   8.00000E+00,  2.319E-02,  1.595E-02, 
   1.00000E+01,  2.181E-02,  1.552E-02, 
   1.50000E+01,  2.023E-02,  1.508E-02, 
   2.00000E+01,  1.970E-02,  1.496E-02])

I=np.array([1.00000E-03,  9.096E+03,  9.078E+03, 
   1.03542E-03,  8.465E+03,  8.448E+03, 
   1.07210E-03,  7.863E+03,  7.847E+03, 
   1.07210E-03,  8.198E+03,  8.181E+03, 
   1.50000E-03,  3.919E+03,  3.908E+03, 
   2.00000E-03,  1.997E+03,  1.988E+03, 
   3.00000E-03,  7.420E+02,  7.351E+02, 
   4.00000E-03,  3.607E+02,  3.548E+02, 
   4.55710E-03,  2.592E+02,  2.537E+02, 
   4.55710E-03,  7.550E+02,  7.121E+02, 
   4.70229E-03,  7.123E+02,  6.724E+02, 
   4.85210E-03,  6.636E+02,  6.270E+02, 
   4.85210E-03,  8.943E+02,  8.375E+02, 
   5.00000E-03,  8.430E+02,  7.903E+02, 
   5.18810E-03,  7.665E+02,  7.198E+02, 
   5.18810E-03,  8.837E+02,  8.283E+02, 
   6.00000E-03,  6.173E+02,  5.822E+02, 
   8.00000E-03,  2.922E+02,  2.777E+02, 
   1.00000E-02,  1.626E+02,  1.548E+02, 
   1.50000E-02,  5.512E+01,  5.208E+01, 
   2.00000E-02,  2.543E+01,  2.363E+01, 
   3.00000E-02,  8.561E+00,  7.622E+00, 
   3.31694E-02,  6.553E+00,  5.744E+00, 
   3.31694E-02,  3.582E+01,  1.188E+01, 
   4.00000E-02,  2.210E+01,  9.616E+00, 
   5.00000E-02,  1.232E+01,  6.573E+00, 
   6.00000E-02,  7.579E+00,  4.518E+00, 
   8.00000E-02,  3.510E+00,  2.331E+00, 
   1.00000E-01,  1.942E+00,  1.342E+00, 
   1.50000E-01,  6.978E-01,  4.742E-01, 
   2.00000E-01,  3.663E-01,  2.295E-01, 
   3.00000E-01,  1.771E-01,  9.257E-02, 
   4.00000E-01,  1.217E-01,  5.650E-02, 
   5.00000E-01,  9.701E-02,  4.267E-02, 
   6.00000E-01,  8.313E-02,  3.598E-02, 
   8.00000E-01,  6.749E-02,  2.962E-02, 
   1.00000E+00,  5.841E-02,  2.646E-02, 
   1.25000E+00,  5.111E-02,  2.399E-02, 
   1.50000E+00,  4.647E-02,  2.243E-02, 
   2.00000E+00,  4.124E-02,  2.092E-02, 
   3.00000E+00,  3.716E-02,  2.059E-02, 
   4.00000E+00,  3.607E-02,  2.142E-02, 
   5.00000E+00,  3.608E-02,  2.250E-02, 
   6.00000E+00,  3.655E-02,  2.357E-02, 
   8.00000E+00,  3.815E-02,  2.553E-02, 
   1.00000E+01,  4.002E-02,  2.714E-02, 
   1.50000E+01,  4.455E-02,  2.980E-02, 
   2.00000E+01,  4.823E-02,  3.101E-02])

Tl=np.array([1.00000E-03,  5.008E+03,  4.995E+03, 
   1.50000E-03,  2.259E+03,  2.247E+03, 
   2.00000E-03,  1.231E+03,  1.219E+03, 
   2.38930E-03,  8.352E+02,  8.240E+02, 
   2.38930E-03,  1.136E+03,  1.115E+03, 
   2.43673E-03,  1.582E+03,  1.546E+03, 
   2.48510E-03,  2.049E+03,  1.999E+03, 
   2.48510E-03,  2.364E+03,  2.303E+03, 
   2.71062E-03,  2.207E+03,  2.150E+03, 
   2.95660E-03,  1.958E+03,  1.910E+03, 
   2.95660E-03,  2.267E+03,  2.210E+03, 
   3.00000E-03,  2.188E+03,  2.135E+03, 
   3.41570E-03,  1.591E+03,  1.553E+03, 
   3.41570E-03,  1.687E+03,  1.647E+03, 
   3.55698E-03,  1.530E+03,  1.495E+03, 
   3.70410E-03,  1.392E+03,  1.360E+03, 
   3.70410E-03,  1.452E+03,  1.419E+03, 
   4.00000E-03,  1.212E+03,  1.185E+03, 
   5.00000E-03,  7.068E+02,  6.900E+02, 
   6.00000E-03,  4.518E+02,  4.398E+02, 
   8.00000E-03,  2.208E+02,  2.131E+02, 
   1.00000E-02,  1.260E+02,  1.202E+02, 
   1.26575E-02,  6.957E+01,  6.521E+01, 
   1.26575E-02,  1.693E+02,  1.357E+02, 
   1.36396E-02,  1.473E+02,  1.126E+02, 
   1.46979E-02,  1.139E+02,  9.356E+01, 
   1.46979E-02,  1.572E+02,  1.207E+02, 
   1.50000E-02,  1.497E+02,  1.154E+02, 
   1.53467E-02,  1.416E+02,  1.097E+02, 
   1.53467E-02,  1.632E+02,  1.254E+02, 
   2.00000E-02,  8.361E+01,  6.761E+01, 
   3.00000E-02,  2.929E+01,  2.467E+01, 
   4.00000E-02,  1.385E+01,  1.173E+01, 
   5.00000E-02,  7.751E+00,  6.513E+00, 
   6.00000E-02,  4.838E+00,  4.003E+00, 
   8.00000E-02,  2.332E+00,  1.844E+00, 
   8.55304E-02,  1.976E+00,  1.539E+00, 
   8.55304E-02,  8.046E+00,  2.264E+00, 
   1.00000E-01,  5.398E+00,  2.007E+00, 
   1.50000E-01,  1.957E+00,  1.044E+00, 
   2.00000E-01,  9.696E-01,  5.753E-01, 
   3.00000E-01,  3.923E-01,  2.393E-01, 
   4.00000E-01,  2.267E-01,  1.334E-01, 
   5.00000E-01,  1.580E-01,  8.897E-02, 
   6.00000E-01,  1.226E-01,  6.661E-02, 
   8.00000E-01,  8.751E-02,  4.557E-02, 
   1.00000E+00,  7.031E-02,  3.600E-02, 
   1.25000E+00,  5.832E-02,  2.955E-02, 
   1.50000E+00,  5.187E-02,  2.616E-02, 
   2.00000E+00,  4.581E-02,  2.345E-02, 
   3.00000E+00,  4.210E-02,  2.309E-02, 
   4.00000E+00,  4.175E-02,  2.437E-02, 
   5.00000E+00,  4.248E-02,  2.587E-02, 
   6.00000E+00,  4.366E-02,  2.731E-02, 
   8.00000E+00,  4.647E-02,  2.975E-02, 
   1.00000E+01,  4.943E-02,  3.167E-02, 
   1.50000E+01,  5.622E-02,  3.463E-02, 
   2.00000E+01,  6.162E-02,  3.578E-02])

H=np.array([1.00000E-03,  7.217E+00,  6.820E+00, 
 1.50000E-03,  2.148E+00,  1.752E+00, 
 2.00000E-03,  1.059E+00,  6.643E-01, 
 3.00000E-03,  5.612E-01,  1.693E-01, 
 4.00000E-03,  4.546E-01,  6.549E-02, 
 5.00000E-03,  4.193E-01,  3.278E-02, 
 6.00000E-03,  4.042E-01,  1.996E-02, 
 8.00000E-03,  3.914E-01,  1.160E-02, 
 1.00000E-02,  3.854E-01,  9.849E-03, 
 1.50000E-02,  3.764E-01,  1.102E-02, 
 2.00000E-02,  3.695E-01,  1.355E-02, 
 3.00000E-02,  3.570E-01,  1.863E-02, 
 4.00000E-02,  3.458E-01,  2.315E-02, 
 5.00000E-02,  3.355E-01,  2.709E-02, 
 6.00000E-02,  3.260E-01,  3.053E-02, 
 8.00000E-02,  3.091E-01,  3.620E-02, 
 1.00000E-01,  2.944E-01,  4.063E-02, 
 1.50000E-01,  2.651E-01,  4.813E-02, 
 2.00000E-01,  2.429E-01,  5.254E-02, 
 3.00000E-01,  2.112E-01,  5.695E-02, 
 4.00000E-01,  1.893E-01,  5.860E-02, 
 5.00000E-01,  1.729E-01,  5.900E-02, 
 6.00000E-01,  1.599E-01,  5.875E-02, 
 8.00000E-01,  1.405E-01,  5.739E-02, 
 1.00000E+00,  1.263E-01,  5.556E-02, 
 1.25000E+00,  1.129E-01,  5.311E-02, 
 1.50000E+00,  1.027E-01,  5.075E-02, 
 2.00000E+00,  8.769E-02,  4.650E-02, 
 3.00000E+00,  6.921E-02,  3.992E-02, 
 4.00000E+00,  5.806E-02,  3.523E-02, 
 5.00000E+00,  5.049E-02,  3.174E-02, 
 6.00000E+00,  4.498E-02,  2.905E-02, 
 8.00000E+00,  3.746E-02,  2.515E-02, 
 1.00000E+01,  3.254E-02,  2.247E-02, 
 1.50000E+01,  2.539E-02,  1.837E-02, 
 2.00000E+01,  2.153E-02,  1.606E-02])

C=np.array([1.00000E-03,  2.211E+03,  2.209E+03, 
1.50000E-03,  7.002E+02,  6.990E+02, 
2.00000E-03,  3.026E+02,  3.016E+02, 
3.00000E-03,  9.033E+01,  8.963E+01, 
4.00000E-03,  3.778E+01,  3.723E+01, 
5.00000E-03,  1.912E+01,  1.866E+01, 
6.00000E-03,  1.095E+01,  1.054E+01, 
8.00000E-03,  4.576E+00,  4.242E+00, 
1.00000E-02,  2.373E+00,  2.078E+00, 
1.50000E-02,  8.071E-01,  5.627E-01, 
2.00000E-02,  4.420E-01,  2.238E-01, 
3.00000E-02,  2.562E-01,  6.614E-02, 
4.00000E-02,  2.076E-01,  3.343E-02, 
5.00000E-02,  1.871E-01,  2.397E-02, 
6.00000E-02,  1.753E-01,  2.098E-02, 
8.00000E-02,  1.610E-01,  2.037E-02, 
1.00000E-01,  1.514E-01,  2.147E-02, 
1.50000E-01,  1.347E-01,  2.449E-02, 
2.00000E-01,  1.229E-01,  2.655E-02, 
3.00000E-01,  1.066E-01,  2.870E-02, 
4.00000E-01,  9.546E-02,  2.950E-02, 
5.00000E-01,  8.715E-02,  2.969E-02, 
6.00000E-01,  8.058E-02,  2.956E-02, 
8.00000E-01,  7.076E-02,  2.885E-02, 
1.00000E+00,  6.361E-02,  2.792E-02, 
1.25000E+00,  5.690E-02,  2.669E-02, 
1.50000E+00,  5.179E-02,  2.551E-02, 
2.00000E+00,  4.442E-02,  2.345E-02, 
3.00000E+00,  3.562E-02,  2.048E-02, 
4.00000E+00,  3.047E-02,  1.849E-02, 
5.00000E+00,  2.708E-02,  1.710E-02, 
6.00000E+00,  2.469E-02,  1.607E-02, 
8.00000E+00,  2.154E-02,  1.468E-02, 
1.00000E+01,  1.959E-02,  1.380E-02, 
1.50000E+01,  1.698E-02,  1.258E-02, 
2.00000E+01,  1.575E-02,  1.198E-02])

def data_reorganizer(element):
    E=np.array([])
    mu=np.array([])
    for i in range(len(element)):
        if i%3==0:
            E=np.append(E,element[i])
        elif i%3==1:
            mu=np.append(mu,element[i])
    return E,mu

Na_E,Na_mu=data_reorganizer(Na)
I_E,I_mu=data_reorganizer(I)
Tl_E,Tl_mu=data_reorganizer(Tl)
H_E,H_mu=data_reorganizer(H)
C_E,C_mu=data_reorganizer(C)

def plot_all():
    plt.plot(Na_E,Na_mu,label="Na")
    plt.plot(I_E,I_mu,label="I")
    plt.plot(Tl_E,Tl_mu,label="Tl")
    plt.plot(H_E,H_mu,label="H")
    plt.plot(C_E,C_mu,label="C")
    plt.xscale("log")
    plt.yscale("log")
    plt.legend()
    # plt.ylabel("Mass Attenuation Coefficient [cm$^2$/g]")
    # plt.xlabel("Photon Energy [MeV]")

E_min=1e-3
E_max=2e1
E_size=1000
E_rat=(E_max/E_min)**(1/E_size)
E=np.array([])
for i in range(E_size):
    E=np.append(E,E_min*E_rat**i)

Na2=np.array([rd.continue_log(i, Na_E, Na_mu) for i in E])
I2=np.array([rd.continue_log(i, I_E, I_mu) for i in E])
Tl2=np.array([rd.continue_log(i, Tl_E, Tl_mu) for i in E])
H2=np.array([rd.continue_log(i, H_E, H_mu) for i in E])
C2=np.array([rd.continue_log(i, C_E, C_mu) for i in E])

NaI=(22.989769*Na2+126.90447*I2)/(22.989769+126.90447)
NE213=(0.452*12.0107*C2+0.548*1.00784*H2)/(0.452*12.0107+0.548*1.00784)


p_NaI=3.67
p_NE213=0.874



def plot_mass_att_coe():
    plt.plot(E,NE213,label="D1")
    plt.plot(E,NaI,label="D2")
    plt.xscale("log")
    plt.yscale("log")
    plt.legend()
    # plt.ylabel("Mass Attenuation Coefficient [cm$^2$/g]")
    # plt.xlabel("Photon Energy [MeV]")


prob_NaI=1-np.e**(-NaI*p_NaI*rd.D2_depth)
prob_NE213=1-np.e**(-NE213*p_NE213*rd.D1_depth)

def plot_abs_prob():
    plt.plot(E,prob_NE213,label="D1")
    plt.plot(E,prob_NaI,label="D2")
    plt.xlim(5e-2)
    plt.xscale("log")
    plt.legend()
    plt.ylabel("Interaction Probability [arb. unit]")
    # plt.xlabel("Photon Energy [MeV]")


def distance_integrand1(x,mu,p):
    return x*mu*p*np.e**(-mu*p*x)

def distance_integrand2(x,mu,p):
    return mu*p*np.e**(-mu*p*x)

dis_NaI=np.array([])
dis_NE213=np.array([])
for i in range(len(E)):
    dis_NaI=np.append( dis_NaI, quad(distance_integrand1,0,rd.D2_depth, (NaI[i],p_NaI) )[0]
                      /quad(distance_integrand2,0,rd.D2_depth, (NaI[i],p_NaI) )[0])
    dis_NE213=np.append( dis_NE213, quad(distance_integrand1,0,rd.D1_depth, (NE213[i],p_NE213) )[0]/
                        quad(distance_integrand2,0,rd.D1_depth, (NE213[i],p_NE213) )[0])
    

    

def plot_av_dis():
    plt.plot(E,dis_NE213,label="D1: Forward")
    plt.plot(E,dis_NaI,label="D2: Backward")
    plt.xlim(5e-2)
    plt.xscale("log")
    plt.legend()
    #plt.ylabel("Average Travel Distance of Absorbed Photon [cm]")
    # plt.xlabel("Photon Energy [MeV]")
    

average_distance=rd.D1_D2_Distance + (rd.D1_depth/2-dis_NE213) + (-rd.D2_depth/2+dis_NaI)



def calculate_average_distance():
    return quad(integrand1,E_min,E_max)[0]/quad(integrand2,E_min,E_max)[0]

def integrand1(Energy):
    return at.energy_distribution(Energy*1000)*rd.continue_linear_set(Energy,E,average_distance)

def integrand2(Energy):
    return at.energy_distribution(Energy*1000)













